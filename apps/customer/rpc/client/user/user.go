// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2
// Source: customer.proto

package user

import (
	"context"

	"go-dango/apps/customer/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BoolValue               = pb.BoolValue
	ButtonOut               = pb.ButtonOut
	ButtonOutBase           = pb.ButtonOutBase
	ChangePasswordRequest   = pb.ChangePasswordRequest
	CreateButtonRequest     = pb.CreateButtonRequest
	CreateMenuRequest       = pb.CreateMenuRequest
	CreatePermissionRequest = pb.CreatePermissionRequest
	CreateRoleRequest       = pb.CreateRoleRequest
	CreateUserRequest       = pb.CreateUserRequest
	DeleteButtonRequest     = pb.DeleteButtonRequest
	DeleteMenuRequest       = pb.DeleteMenuRequest
	DeletePermissionRequest = pb.DeletePermissionRequest
	DeleteRoleRequest       = pb.DeleteRoleRequest
	DeleteUserRequest       = pb.DeleteUserRequest
	GetButtonRequest        = pb.GetButtonRequest
	GetMenuRequest          = pb.GetMenuRequest
	GetPermissionRequest    = pb.GetPermissionRequest
	GetRoleRequest          = pb.GetRoleRequest
	GetUserRequest          = pb.GetUserRequest
	ListButtonRequest       = pb.ListButtonRequest
	ListMenuRequest         = pb.ListMenuRequest
	ListPermissionRequest   = pb.ListPermissionRequest
	ListRoleRequest         = pb.ListRoleRequest
	ListUserRequest         = pb.ListUserRequest
	LoginOut                = pb.LoginOut
	LoginRequest            = pb.LoginRequest
	MenuOut                 = pb.MenuOut
	MenuOutBase             = pb.MenuOutBase
	MetaSchemas             = pb.MetaSchemas
	NilOut                  = pb.NilOut
	PagButtonOutBase        = pb.PagButtonOutBase
	PagMenuOutBase          = pb.PagMenuOutBase
	PagPermissionOutBase    = pb.PagPermissionOutBase
	PagRoleOutBase          = pb.PagRoleOutBase
	PagUserOut              = pb.PagUserOut
	PermissionOutBase       = pb.PermissionOutBase
	ResetPasswordRequest    = pb.ResetPasswordRequest
	RoleOut                 = pb.RoleOut
	RoleOutBase             = pb.RoleOutBase
	UInt32Value             = pb.UInt32Value
	UpdateButtonRequest     = pb.UpdateButtonRequest
	UpdateMenuRequest       = pb.UpdateMenuRequest
	UpdatePermissionRequest = pb.UpdatePermissionRequest
	UpdateRoleRequest       = pb.UpdateRoleRequest
	UpdateUserRequest       = pb.UpdateUserRequest
	UserOut                 = pb.UserOut

	User interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserOut, error)
		UpdateCustomer(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserOut, error)
		DeleteCustomer(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*NilOut, error)
		GetCustomer(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserOut, error)
		ListCustomer(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*PagUserOut, error)
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*NilOut, error)
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*NilOut, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginOut, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateCustomer(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateCustomer(ctx, in, opts...)
}

func (m *defaultUser) DeleteCustomer(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*NilOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteCustomer(ctx, in, opts...)
}

func (m *defaultUser) GetCustomer(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetCustomer(ctx, in, opts...)
}

func (m *defaultUser) ListCustomer(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*PagUserOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.ListCustomer(ctx, in, opts...)
}

func (m *defaultUser) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*NilOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.ResetPassword(ctx, in, opts...)
}

func (m *defaultUser) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*NilOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
